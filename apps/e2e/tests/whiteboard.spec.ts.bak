import { test, expect } from '@playwright/test';

test.describe('React Whiteboard', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/');
  });

  test('should display the whiteboard with toolbar', async ({ page }) => {
    // Check that the main app container exists
    await expect(page.locator('.app')).toBeVisible();
    
    // Check that the toolbar exists
    await expect(page.locator('.toolbar')).toBeVisible();
    
    // Check that the whiteboard container exists
    await expect(page.locator('.whiteboard-container')).toBeVisible();
    
    // Check that the grid background is displayed
    await expect(page.locator('.grid-background')).toBeVisible();
  });

  test('should have Select and Rectangle tools', async ({ page }) => {
    // Check that the Select tool button exists and is active by default
    const selectButton = page.locator('.tool-button:has-text("Select")');
    await expect(selectButton).toBeVisible();
    await expect(selectButton).toHaveClass(/active/);
    
    // Check that the Rectangle tool button exists
    const rectangleButton = page.locator('.tool-button:has-text("Rectangle")');
    await expect(rectangleButton).toBeVisible();
  });

  test('should switch between tools', async ({ page }) => {
    const selectButton = page.locator('.tool-button:has-text("Select")');
    const rectangleButton = page.locator('.tool-button:has-text("Rectangle")');
    
    // Initially, Select should be active
    await expect(selectButton).toHaveClass(/active/);
    await expect(rectangleButton).not.toHaveClass(/active/);
    
    // Click Rectangle tool
    await rectangleButton.click();
    
    // Now Rectangle should be active, Select should not be
    await expect(rectangleButton).toHaveClass(/active/);
    await expect(selectButton).not.toHaveClass(/active/);
    
    // Click Select tool again
    await selectButton.click();
    
    // Select should be active again
    await expect(selectButton).toHaveClass(/active/);
    await expect(rectangleButton).not.toHaveClass(/active/);
  });

  test('should draw a rectangle', async ({ page }) => {
    // Switch to Rectangle tool
    await page.locator('.tool-button:has-text("Rectangle")').click();
    
    // Get the whiteboard container
    const whiteboard = page.locator('.whiteboard-container');
    
    // Draw a rectangle
    await whiteboard.hover({ position: { x: 100, y: 100 } });
    await page.mouse.down();
    await whiteboard.hover({ position: { x: 300, y: 200 } });
    await page.mouse.up();
    
    // Wait a bit for the shape to be rendered
    await page.waitForTimeout(100);
    
    // Check that a rectangle shape was created
    const rectangle = page.locator('[data-shape="true"][data-shape-type="rectangle"]');
    await expect(rectangle).toBeVisible();
  });

  test('should select and move a shape', async ({ page }) => {
    // First, draw a rectangle
    await page.locator('.tool-button:has-text("Rectangle")').click();
    const whiteboard = page.locator('.whiteboard-container');
    
    await whiteboard.hover({ position: { x: 100, y: 100 } });
    await page.mouse.down();
    await whiteboard.hover({ position: { x: 300, y: 200 } });
    await page.mouse.up();
    
    // Switch to Select tool
    await page.locator('.tool-button:has-text("Select")').click();
    
    // Click on the rectangle to select it
    const rectangle = page.locator('[data-shape="true"][data-shape-type="rectangle"]');
    const initialBox = await rectangle.boundingBox();
    expect(initialBox).toBeTruthy();
    
    // Click on the shape to select it
    await rectangle.click();
    
    // Check that selection indicators appear
    await expect(page.locator('.selection-box')).toBeVisible();
    
    // Drag the shape to a new position
    await rectangle.hover();
    await page.mouse.down();
    await page.mouse.move(initialBox!.x + 100, initialBox!.y + 50);
    await page.mouse.up();
    
    // Check that the shape moved
    const newBox = await rectangle.boundingBox();
    expect(newBox).toBeTruthy();
    expect(newBox!.x).toBeGreaterThan(initialBox!.x);
    expect(newBox!.y).toBeGreaterThan(initialBox!.y);
  });

  test('should handle zoom with mouse wheel', async ({ page }) => {
    const whiteboard = page.locator('.whiteboard-container');
    
    // Draw a rectangle first
    await page.locator('.tool-button:has-text("Rectangle")').click();
    await whiteboard.hover({ position: { x: 200, y: 200 } });
    await page.mouse.down();
    await whiteboard.hover({ position: { x: 300, y: 300 } });
    await page.mouse.up();
    
    // Get initial size
    const rectangle = page.locator('[data-shape="true"][data-shape-type="rectangle"]');
    const initialBox = await rectangle.boundingBox();
    expect(initialBox).toBeTruthy();
    
    // Zoom in
    await whiteboard.hover({ position: { x: 250, y: 250 } });
    await page.mouse.wheel(0, -100);
    await page.waitForTimeout(100);
    
    // Check that the shape got bigger
    const zoomedBox = await rectangle.boundingBox();
    expect(zoomedBox).toBeTruthy();
    expect(zoomedBox!.width).toBeGreaterThan(initialBox!.width);
    expect(zoomedBox!.height).toBeGreaterThan(initialBox!.height);
  });
});